READ ME iOS-SummerPracticum


Introduction

Hi,
Thank you for taking the time to explore this repository read this README.
In this read me you will find a brief description of the repository, instructions on how to run the app, and a description of dependencies not present in the repo for security.
Please note that this repo is designed to be used in conjunction with the web apps repo found here: https://github.com/Eoinoha/SummerPracticum
As such some files, such as the best practice document have not been replicated. 


Repo Description

Throughout the repo a number of files are named DBA after the name of the app.
From the main repo there are a number of folders.
Pods contains the cocoapods used in the app.
DBATests contains unittesting for the app.
Both DBA.xcodeproj and DBA.xcworkspace appear as folders in the repo but present as the files used by xcode for opening and editing the application.
Podfile is the information used by, and list of, cocoapods. Podfile.lock is related to its running.

The folder DBA contains most of the files relevent to the app.
Inside DBA Assets.xcassets contains images and colour palettes uned within the app.
Base.lproj contains the apps launchscreen storyboard.
Books contains the .txt files of each books chapters, stored within their own folders.
Model, View, and Controller contain the .swift and .xib files for the app sorted accordingly. The main storyboard file is also in the View folder.
AppDelegate.swift contains startup information for the app sucha s connecting to Firebase.
Constants.swift contains variables, sorted into structs, that are used in most views in the app.
GeneralFunctions.swift is similar but containing methods used on multiple views.
GoogleService-info.plist, Info.plist and SceneDelegate.swift are key files largely generated by Google and Apple.
routes.json and stops.json are both .json files containing information regarding Dublin Bus routes and stops respectively.
Absent here is Sensitive.swift which functions the same as Constants.swift but with API keys and email addresses. This is not tracked by the repo and will need to be readded to run the app.


Installation Instructions

To install and run the app, on either a simulator or iPhone, please follow the following instructions. 
You will need a device running MacOS 11 and an iPhone runnning iOS 14. Later OSs my work but have not been tested. The app has not been designed to run on earlier versions on iOS and may not function correctly.

1.  Install Xcode from the Mac app store. 

2.  In terminal, clone this repo.

3.  In finder, open the repos folder and open DBA.xcworkspace (white icon, not blue).

4.  Wait for indexing to complete. Please note, this may take a few minutes.

5.  In the file list on the left you will likely find two files highlighted in red: GoogleServices-info.plist and Sensitive.swift.
    Delete both of these.
5a. In the finder from step 2, navidate into the folder DBA. From there, drag the file GoogleServices-info.plist into xcode where the old, red, reference was. 
    Check that the settings match those in this image and click finish.
5b. If you have a copy of Sensitive.swift do the same as you did for GoogleService-info.plist.
    Otherwise, in Xcode, from the file selector on the left, right click the DBA folder and select 'New file'. Select a swift file from the iOS option and click next. Name the file Sensitive and create the file.
    This file contains a single struct called 'S' with the following variables.
    'openWeatherAPIKey' contains the API key for Open Weather (String)
    'googleMapsAPIKey' contains the api key for our google maps API. If you are using your own make sure the iOS maps and directions are enabled. (String)
    'contactUsAddress' contains the emails used for the contact us page. Be sure to add atleast one email address. (String array)
    'admins' is an array of strings, similar to contactUsAddresses. Once again, just ensure there is at least one address here although it should not cause an issue if this array is empty. (String array)
    'stopsTimesURL', 'fareURL', and 'timesURL' contains the urls for our backend. (String)
    
6.  At the point the app can be simulated. To do this select a simulator from the drop down menu from the top and click play.
    Please note that there are a lot of simulators here the app is not designed to run on, such as older iPhone models and any iPad.
    We recommend using larger iPhones suchas the iPhone 11 Pro Max, as the larger screen size makes it easier to interact with when using a mouse.
    Please note that the simulator sets the phones locations a default location not in Ireland as standard. We recommend setting it to UCD.
    To do this go to Features -> Location -> Custom Location and enter latitude: 53.3065 and longitude: -6.2255.
    Please note that the Contact Us feature will not work on a simulator as it requires an Apple ID to send the email, which the simulator is not equiped with.
    
7.  To side load the app onto a compatable iPhone, plug the iPhone into the Mac.

8.  From the project navigator select the blue DBA icon. Then choose General -> Identity -> Bundle Identifer
    This takes a reverse domain name that must be unique to each app. 
    We recommend using com.<your_name>.DBA
    If this is not available try variations of your name, or something difference in that section.
    
9.  Before proceeding ensure that both Xcode and the iPhone are up to date.

10. Next you will need to set your Apple ID up as a free developer account.
    To do this, from the menu at the top, select Xcode -> Preferences -> Accounts
    Click + to add a new account.
    Select Apple ID and click continue
    Enter the Apple ID used on your iPhone
    If you see your Apple ID in the account section you can close preferences.
    
11. Now we will need to sign the app.
    To do this, from the DBA sections from step 8, go to Signing and Capabilities -> All
    Make sure that 'Automatically Manage Signing' is checked.
    From the Team dropdown menu, select your Apple ID.
    Any errors you see now are likely due to an issue with the dubdle identifer from step 8, or your iPhone not being attached to the Mac. Otherwise most errors with sideloading can be fixed be resetting the iPhone.
    
12. From the list of simulators from step 6, select your iPhone (likely at the top of the list), and click play.
    This can take a few minutes the first time.




I hope you did not experience any issues sideloading the app and thank you for your time. 
